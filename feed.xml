<?xml version="1.0"?><rss version="2.0"><channel><title>Haoyi's Programming Blog</title><link>http://www.lihaoyi.com/</link><description></description><item><title>Hello World Blog</title><link>http://www.lihaoyi.com/post/HelloWorldBlog.html</link><description>&lt;p&gt;I have a new programming blog, and you're looking at it! I'll post things about programming on it and there'll be a comment box at the bottom of each post if anyone wants to discuss the things I posted. I'm currently working with the Scala, Python and Javascript programming languages, and am interested in static analysis, compilers, web development and developer tools.&lt;/p&gt;
&lt;p&gt;I am not the first person to have a blog, nor the first person to have a programming blog, nor is this my first blog. Nevertheless, for me, doing this is a mix of new and old ideas.&lt;/p&gt;</description><pubDate>Thu, 7 Jan 2016 00:00:00 GMT</pubDate><lastBuildDate>Fri, 4 Mar 2016 00:00:00 GMT</lastBuildDate></item><item><title>Code Reviewing My Earliest Surviving Program</title><link>http://www.lihaoyi.com/post/CodeReviewingMyEarliestSurvivingProgram.html</link><description>&lt;p&gt;Programmers usually view old, legacy code with a mix of fear and respect. As a professional software engineer, you often have to deal with systems written long before you turned up. You have to dive into them, understand them, review them, and improve them. You often wonder...&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Why did they do this&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;What were they thinking?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sometimes to realize later that the &lt;em&gt;they&lt;/em&gt; is in fact, yourself!&lt;/p&gt;</description><pubDate>Fri, 8 Jan 2016 00:00:00 GMT</pubDate><lastBuildDate>Fri, 4 Mar 2016 00:00:00 GMT</lastBuildDate></item><item><title>Strategic Scala Style: Principle of Least Power</title><link>http://www.lihaoyi.com/post/StrategicScalaStylePrincipleofLeastPower.html</link><description>&lt;p&gt;The Scala language is large and complex, and it provides a variety of tools that a developer can use to do the same thing in a variety of ways. Given the range of possible solutions to every problem, how can a developer choose which one should be used? This is the first in a series of blog posts aiming to provide style guidelines at a &quot;strategic&quot; level. Above the level of &quot;how much whitespace should I use&quot; or camelCase vs PascalCase, it should help a developer working with the Scala language choose from the buffet of possible solutions.&lt;/p&gt;</description><pubDate>Sun, 14 Feb 2016 00:00:00 GMT</pubDate><lastBuildDate>Fri, 4 Mar 2016 00:00:00 GMT</lastBuildDate></item><item><title>Talks I've Given</title><link>http://www.lihaoyi.com/post/TalksIveGiven.html</link><description>&lt;p&gt;I've given a bunch of talks at meetup groups, industry conferences and academic workshops. Most of them are about my work in the Scala programming language. The actual recordings for these are slightly scattered, over a mix of Youtube videos, Vimeo, and some conference sites.&lt;/p&gt;
&lt;p&gt;Here's a consolidated list of their abstracts and videos, most recent first. I'll keep this updated as time goes on.&lt;/p&gt;</description><pubDate>Sun, 14 Feb 2016 00:00:00 GMT</pubDate><lastBuildDate>Fri, 4 Mar 2016 00:00:00 GMT</lastBuildDate></item><item><title>Strategic Scala Style: Conciseness &amp; Names</title><link>http://www.lihaoyi.com/post/StrategicScalaStyleConcisenessNames.html</link><description>&lt;p&gt;&quot;Naming things&quot; is one of those traditionally &quot;hard problems&quot; in software engineering. The Scala programming language gives you more tools than most languages do to manage names: apart from picking alphanumeric names of arbitrary length, you can also name things using operators, or in many cases not names things at all using language features like &lt;code&gt;apply&lt;/code&gt; or the &lt;code&gt;_&lt;/code&gt; placeholder parameter.&lt;/p&gt;
&lt;p&gt;However, the fact that code ends up &quot;too concise&quot; is itself one of the most common complaints leveled against the Scala programming language. How can we pick the right balance of verbosity and conciseness, at the right times, to ensure future maintainers of our software do not end up hating us?&lt;/p&gt;</description><pubDate>Mon, 22 Feb 2016 00:00:00 GMT</pubDate><lastBuildDate>Fri, 4 Mar 2016 00:00:00 GMT</lastBuildDate></item><item><title>What's in a Build Tool?</title><link>http://www.lihaoyi.com/post/WhatsinaBuildTool.html</link><description>&lt;p&gt;A &quot;Build tool&quot; is a catch-all term that refers to anything that is needed to get a piece of software set up, but isn't needed after that. Different programming communities have a wealth of different tools: some use stalwarts like &lt;code&gt;make&lt;/code&gt;, some use loose collections of &lt;code&gt;.sh&lt;/code&gt; scripts, some use XML-based tools like Maven or Ant, JSON-based tools like Grunt, or code-based tools like Gulp, Grunt or SBT.&lt;/p&gt;
&lt;p&gt;Each of these tools does different things and has a different set of trade-offs associated with them. Given all these different designs, and different things each tool does, what are the common features that build tools provide that people want? How to existing tools stack up against the things that people want build tools to do?&lt;/p&gt;</description><pubDate>Fri, 4 Mar 2016 00:00:00 GMT</pubDate><lastBuildDate>Sat, 5 Mar 2016 00:00:00 GMT</lastBuildDate></item><item><title>Diving Into Other People's Code</title><link>http://www.lihaoyi.com/post/DivingIntoOtherPeoplesCode.html</link><description>&lt;p&gt;This post will walk you through an exercise in diving into someone else's code. The goal will be to make an arbitrary change to the code of the &lt;a href=&quot;https://github.com/spyder-ide/spyder#spyder---the-scientific-python-development-environment&quot;&gt;Spyder Python IDE&lt;/a&gt;, a project I have never touched before in my life, and learn &lt;em&gt;just&lt;/em&gt; enough about it to accomplish what I want without getting bogged down. You will learn how to approach problems without the rigour taught in formal education, and instead with guesswork, experimentation, and insight learned in a professional environment. You will see first-hand the joys, sorrows and frustrations trying to navigate the project, culminating in a working (if rough) patch adding a feature to a large, unfamiliar codebase.&lt;/p&gt;
&lt;p&gt;Everyone who learns programming has written a pile of code in a bunch of different programs: whether it's implementing algorithms for problem sets, building websites, or making video games. Being a professional software engineer, on the other hand, very often does &lt;em&gt;not&lt;/em&gt; involve &lt;em&gt;&quot;writing lots of code&quot;&lt;/em&gt;! More often, you spend your time spelunking deep into other peoples code: code you do not understand, did not write, and have possibly never seen before in your life. You have no-one to ask for help, no-one to hear you scream, and yet you have to make forward progress.&lt;/p&gt;</description><pubDate>Tue, 15 Mar 2016 00:00:00 GMT</pubDate><lastBuildDate>Wed, 16 Mar 2016 00:00:00 GMT</lastBuildDate></item><item><title>Planning Bus Trips with Python &amp; Singapore's Smart Nation APIs</title><link>http://www.lihaoyi.com/post/PlanningBusTripswithPythonSingaporesSmartNationAPIs.html</link><description>&lt;p&gt;The &lt;a href=&quot;http://www.pmo.gov.sg/smartnation&quot;&gt;Singapore Smart Nation&lt;/a&gt; initiative is a government push to try and improve the efficiency of Singapore, as a country, using technology. Among other projects, there has been a push to make real-time data openly available so that everyone, from individuals to corporations, can use it creatively to make solutions to day-to-day municipal problems.&lt;/p&gt;
&lt;p&gt;This post will explore one such dataset: the &lt;a href=&quot;http://www.mytransport.sg/content/mytransport/home/dataMall.html&quot;&gt;LTA Data Mall&lt;/a&gt;, by Singapore's Land Transport Authority. This dataset provides both offline geographical data on roads &amp;amp; public transport, as well as real-time data on things like bus arrivals and taxis. Using this dataset, the &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; programming language, and basic programming and data-science techniques, we will build a trip planner to find the shortest bus commute from A to B, but powered by real data and bounded by real-world limitations.&lt;/p&gt;
&lt;p&gt;From registering an API key, fetching data from an endpoint, sanitizing and understanding the data, implementing algorithms like a &lt;a href=&quot;https://en.wikipedia.org/wiki/Breadth-first_search&quot;&gt;Breadth First Search&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm&quot;&gt;Dijkstra's Algorithm&lt;/a&gt;, refining the search, and finally evaluating its ability to plan useful and correct bus trips. You'll get a full tour of the process involved in making good use of public datasets!&lt;/p&gt;</description><pubDate>Thu, 31 Mar 2016 00:00:00 GMT</pubDate><lastBuildDate>Fri, 1 Apr 2016 00:00:00 GMT</lastBuildDate></item><item><title>Strategic Scala Style: Practical Type Safety</title><link>http://www.lihaoyi.com/post/StrategicScalaStylePracticalTypeSafety.html</link><description>&lt;p&gt;This post explores how you can make use of the type-safety of the Scala programming language to help catch the mistakes you make when writing Scala programs.&lt;/p&gt;
&lt;p&gt;While Scala is has a compiler that can help you catch errors, and many call it &quot;type-safe&quot;, there is in fact a whole range of ways you can write Scala that provide greater- or lesser- amounts of safety. We will discuss various techniques that you can use to shift your code to the &quot;safer&quot; side of the spectrum. We'll consciously ignore the theoretical side of things with it's absolute proofs and logic, and focus on the practical side of how to make the Scala compiler catch more of your dumb bugs.&lt;/p&gt;
&lt;p&gt;This is the third in the Strategic Scala Style series (after &lt;a href=&quot;http://www.lihaoyi.com/post/StrategicScalaStylePrincipleofLeastPower.html&quot;&gt;Principle of Least Power&lt;/a&gt; and &lt;a href=&quot;http://www.lihaoyi.com/post/StrategicScalaStyleConcisenessNames.html&quot;&gt;Conciseness &amp;amp; Names&lt;/a&gt;). &lt;/p&gt;</description><pubDate>Sat, 30 Apr 2016 00:00:00 GMT</pubDate><lastBuildDate>Mon, 30 May 2016 00:00:00 GMT</lastBuildDate></item><item><title>Micro-optimizing your Scala code</title><link>http://www.lihaoyi.com/post/MicrooptimizingyourScalacode.html</link><description>&lt;p&gt;&lt;em&gt;&quot;Micro-optimization&quot;&lt;/em&gt; is normally used to describe low-level optimizations that do not change the overall structure of the program; this is as opposed to &quot;high level&quot; optimizations (e.g. choosing efficient algorithms, caching things, or parallelizing things) that often require broader changes to your code. Things like removing intermediate objects to minimize memory allocations, or using bit-sets rather than &lt;code&gt;HashSet&lt;/code&gt;s to speed up lookups, are examples of micro-optimizations.&lt;/p&gt;
&lt;p&gt;Micro-optimization has a bad reputation, and is especially uncommon in the Scala programming language where the community is more interested in other things such as proofs, fancy usage of static types, or distributed systems. Often, it is viewed as a maintainability cost with few benefits. This post will demonstrate the potential benefit of micro-optimizations, and how it can be a valuable technique to have in your toolbox of programming techniques.&lt;/p&gt;</description><pubDate>Mon, 30 May 2016 00:00:00 GMT</pubDate><lastBuildDate>Mon, 30 May 2016 00:00:00 GMT</lastBuildDate></item><item><title>Strategic Scala Style: Designing Datatypes</title><link>http://www.lihaoyi.com/post/StrategicScalaStyleDesigningDatatypes.html</link><description>&lt;p&gt;When programming in Scala, there are two main ways of avoiding repetition: you can define &lt;em&gt;functions&lt;/em&gt; to represent commonly-used procedures or computations, and you can define &lt;em&gt;data-types&lt;/em&gt;, e.g. using &lt;code&gt;class&lt;/code&gt;es or &lt;code&gt;case class&lt;/code&gt;es, to represent commonly-used bundles of data that you tend to pass around or use together.&lt;/p&gt;
&lt;p&gt;Lots of people have opinions about &lt;em&gt;functions&lt;/em&gt;: they should be &quot;pure&quot;, not too long, not be indented more than &lt;em&gt;this&lt;/em&gt; much, etc. etc. etc.. Much less has been written about what a good data-type looks like, even though they play just as important a role in your Scala codebase. This post will explore some of the considerations and guidelines I follow when designing the &lt;code&gt;class&lt;/code&gt;es and &lt;code&gt;case class&lt;/code&gt;es that make up my Scala programs, and how you can apply them to your own Scala code.&lt;/p&gt;</description><pubDate>Wed, 15 Jun 2016 00:00:00 GMT</pubDate><lastBuildDate>Thu, 16 Jun 2016 00:00:00 GMT</lastBuildDate></item><item><title>Build your own Command Line with ANSI escape codes</title><link>http://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html</link><description>&lt;p&gt;Everyone is used to programs printing out output in a terminal that scrolls as new text appears, but that's not all your can do: your program can color your text, move the cursor up, down, left or right, or clear portions of the screen if you are going to re-print them later. This is what lets programs like &lt;a href=&quot;https://en.wikipedia.org/wiki/Git_(software)&quot;&gt;Git&lt;/a&gt; implement its dynamic progress indicators, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Vim_(text_editor)&quot;&gt;Vim&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Bash_(Unix_shell)&quot;&gt;Bash&lt;/a&gt; implement their editors that let you modify already-displayed text without scrolling the terminal.&lt;/p&gt;
&lt;p&gt;There are libraries like &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Readline&quot;&gt;Readline&lt;/a&gt;, &lt;a href=&quot;https://github.com/jline/jline2&quot;&gt;JLine&lt;/a&gt;, or the &lt;a href=&quot;https://github.com/jonathanslenders/python-prompt-toolkit&quot;&gt;Python Prompt Toolkit&lt;/a&gt; that help you do this in various programming languages, but you can also do it yourself. This post will explore the basics of how you can control the terminal from any command-line program, with examples in Python, and how your own code can directly make use of all the special features the terminal has to offer.&lt;/p&gt;</description><pubDate>Sat, 2 Jul 2016 00:00:00 GMT</pubDate><lastBuildDate>Sat, 2 Jul 2016 00:00:00 GMT</lastBuildDate></item></channel></rss>